# Verify setting of working directory, volumes and environment variables for GOPATH mode projects

# Establish the image we are using
[!windows] env IMAGE=busybox:1.31.1-glibc
[windows] skip 'TODO: support windows-native images in --volume flags'
[windows] env IMAGE=mcr.microsoft.com/windows/nanoserver:1809

# Set a custom GOPATH
env GOPATH=$WORK/gp1:$WORK/gp2

cd gp1/src/github.com/a/b

exec go test -exec='dockexec '$IMAGE' -v '$HOST_GOROOT':/goroot ' -v ./cmd/blah
! stderr .+

# working directory
[!windows] stdout '^\Qworking directory: /gopath1/src/github.com/a/b/cmd/blah\E$'
[windows]  stdout '^\Q\E$'

# gopath
[!windows] stdout '^\Qgopath: /gopath1:/gopath2\E$'
[windows]  stdout '^\Q\E$'

# gocache
[!windows] stdout '^\Qgocache: /gocache\E$'
[windows]  stdout '^\Q\E$'

-- gp1/file.txt --

-- gp2/file.txt --

-- gp1/src/github.com/a/b/cmd/blah/main.go --
package main

-- gp1/src/github.com/a/b/cmd/blah/main_test.go --
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"
)

func TestOutput(t *testing.T) {
	// Output working directory
	wd, err := os.Getwd()
	if err != nil {
		t.Fatalf("failed to get working directory: %v", err)
	}
	fmt.Printf("working directory: %v\n", wd)

	// Verify that we can run go
	var env struct {
		GOCACHE string
		GOPATH  string
	}
	cmd := exec.Command("/goroot/bin/go", "env", "-json")
	out, err := cmd.CombinedOutput()
	if err != nil {
		t.Fatalf("failed to run %v: %v\n%s", strings.Join(cmd.Args, " "), err, out)
	}
	if err := json.Unmarshal(out, &env); err != nil {
		t.Fatalf("failed to unmarshal %v output: %v", strings.Join(cmd.Args, " "), err)
	}
	fmt.Printf("gopath: %v\n", env.GOPATH)
	fmt.Printf("gocache: %v\n", env.GOCACHE)

	// Verify that dummy files exist for each element of GOPATH
	for _, v := range strings.Split(env.GOPATH, string(os.PathListSeparator)) {
		f := filepath.Join(v, "file.txt")
		if _, err := os.Stat(f); err != nil {
			t.Fatalf("failed to stat %v: %v", f, err)
		}
	}
}
