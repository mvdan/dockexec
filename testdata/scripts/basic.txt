# Basic test cases for dockexec.

# Note that we want to test os.UserHomeDir,
# so ensure that "go test" has a valid HOME too.
mkdir empty-home
[!windows] env HOME=${WORK}${/}empty-home
[windows] env USERPROFILE=${WORK}${/}empty-home

# Note that the os/user import requires extra C libraries,
# which we don't need; we want os/user's "pure Go" behavior.
env CGO_ENABLED=0

# Check that we succeed without -exec.
exec go test
stdout 'PASS'

# Check that we fail with an invalid image.
! exec go test -exec='dockexec :bad:syntax:'
stdout 'docker:.*invalid'

# Check that a bad 'docker run' flag breaks.
! exec go test -exec='dockexec irrelevant-image --invalidflag' -v
stdout 'unknown flag'
stdout 'docker run --help'

[!windows] env IMAGE=busybox:1.34.1-musl
[windows] skip 'TODO: support windows-native images in --volume flags'
[windows] env IMAGE=mcr.microsoft.com/windows/nanoserver:1809

# Check that we succeed with just a simple image, and that the test requiring
# busybox isn't skipped.
exec go test -exec='dockexec '$IMAGE -v
[!windows] stdout 'PASS.*TestWithBusybox'
[!windows] stdout 'SKIP.*TestWithWindows'
[windows] stdout 'SKIP.*TestWithBusybox'
[windows] stdout 'PASS.*TestWithWindows'
stdout 'PASS'

# Check that test flags, even custom ones, work.
exec go test -exec='dockexec '$IMAGE -v -myflag
! stdout 'SKIP.*TestWithMyFlag'
stdout 'PASS.*TestWithMyFlag'
stdout 'PASS'

# Check that 'docker run' flags work.
exec go test -exec='dockexec '$IMAGE' -e MYVAR=foo' -v
! stdout 'SKIP.*TestWithMyVar'
stdout 'PASS.*TestWithMyVar'
stdout 'PASS'

-- go.mod --
module foo.com/bar

-- f.go --
package bar

func True() bool { return true }

-- f_test.go --
package bar

import (
	"flag"
	"os"
	"os/exec"
	"os/user"
	"runtime"
	"testing"
)

var myflag = flag.Bool("myflag", false, "")

func TestTrue(t *testing.T) {
	if True() != true {
		t.FailNow()
	}
}

func TestWithBusybox(t *testing.T) {
	if _, err := exec.LookPath("busybox"); err != nil {
		t.Skip("busybox not installed")
	}
}

func TestWithWindows(t *testing.T) {
	if runtime.GOOS != "windows" {
		t.Skip("not on windows")
	}
}

func TestWithMyFlag(t *testing.T) {
	if !*myflag {
		t.Skip("-myflag not specified")
	}
}

func TestWithMyVar(t *testing.T) {
	if os.Getenv("MYVAR") != "foo" {
		t.Skip("MYVAR=foo not specified")
	}
}

func TestUserHomeDIr(t *testing.T) {
	dir, err := os.UserHomeDir()
	if err != nil {
		t.Fatalf("os.UserHomeDir failed: %v", err)
	}
	if _, err := os.Stat(dir); err != nil {
		t.Fatalf("os.UserHomeDir cannot be accessed: %v", err)
	}
}

func TestCurrentUser(t *testing.T) {
	_, err := user.Current()
	if err != nil {
		t.Fatalf("user.Current failed: %v", err)
	}
}
